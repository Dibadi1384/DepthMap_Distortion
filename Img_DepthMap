import cv2
import torch
import matplotlib.pyplot as plt
import numpy as np

# Load the MiDaS Model
model_type = "DPT_Large"  # Options: "DPT_Large", "DPT_Hybrid", "MiDaS_small"

# Load the MiDaS model from PyTorch Hub
midas = torch.hub.load("intel-isl/MiDaS", model_type)

# Move the model to GPU if available
device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
midas.to(device)
midas.eval()

# Load the appropriate transforms based on the model type
midas_transforms = torch.hub.load("intel-isl/MiDaS", "transforms")

if model_type in ["DPT_Large", "DPT_Hybrid"]:
    transform = midas_transforms.dpt_transform
else:
    transform = midas_transforms.small_transform

# Load and Transform the Image
image_path = 'mountain.jpg'
img = cv2.imread(image_path)

if img is None:
    raise FileNotFoundError(f"Image '{image_path}' not found. Please check the path.")

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Apply the transforms
input_batch = transform(img).to(device)

# Predict Depth Map
with torch.no_grad():
    prediction = midas(input_batch)

    # Resize the prediction to match the input image size
    prediction = torch.nn.functional.interpolate(
        prediction.unsqueeze(1),
        size=img.shape[:2],
        mode="bicubic",
        align_corners=False,
    ).squeeze()

# Convert the prediction to a NumPy array
output = prediction.cpu().numpy()

# Display the Depth Map
plt.figure(figsize=(10, 8))
plt.imshow(output, cmap='inferno')
plt.axis('off')
plt.title('Depth Map')
plt.show()

# Save the Depth Map 
plt.imsave("depth_map.png", output, cmap='inferno')

# Alternatively, save using OpenCV with normalization
# Normalize the depth map to the range [0, 255]
depth_min = output.min()
depth_max = output.max()
depth_normalized = (output - depth_min) / (depth_max - depth_min)
depth_normalized = (depth_normalized * 255).astype(np.uint8)

cv2.imwrite("depth_map_cv2.png", depth_normalized)

